/*
   Copyright 2023 SpecMesh Contributors (https://github.com/specmesh)

   Licensed under the Apache License, Version 2.0 (the "License"); you may not
   use this file except in compliance with the License. You may obtain a copy of
   the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
   License for the specific language governing permissions and limitations under
   the License.
 */
plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'checkstyle'
    id 'signing'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'pl.allegro.tech.build.axion-release' version '1.16.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
mainClassName = 'io.specmesh.avro.random.generator.Main'
group = 'io.specmesh'
project.version = scmVersion.version
version = scmVersion.version
archivesBaseName = 'kafka-random-generator'

repositories {
    mavenCentral()
}

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:10.0'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'org.apache.avro:avro:1.11.3'
    implementation 'org.apache.commons:commons-compress:1.25.0'
    implementation 'com.github.mifmif:generex:1.0.2'
    implementation 'org.xerial.snappy:snappy-java:1.1.10.5'

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation("org.hamcrest:hamcrest-all:1.3")
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'Kafka Random Generator',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'io.specmesh.avro.random.generator.Main'
        )
    }
}
shadowJar {
    configurations = [project.configurations.runtimeClasspath]
    mergeServiceFiles()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task standalone(type: Jar) {
    destinationDir file("$rootDir/bin")
    archiveName 'arg.jar'
    from configurations.runtimeClasspath
    manifest {
        attributes 'Main-Class': 'io.specmesh.avro.random.generator.Main'
    }
    with jar
}

clean {
    doLast {
        file("$rootDir/bin").deleteDir()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = 'kafka-random-generator'
            version = project.version

            pom {
                name = 'Kafka Random Generator'
                description = 'Kafka Random Generator is a tool for randomly generating data to match Avro schemas'
                url = 'https://github.com/specmesh/kafka-random-generator'

                scm {
                    url = 'https://github.com/specmesh/kafka-random-generator'
                    connection = 'scm:git:ssh://github.com/specmesh/kafka-random-generator.git'
                    developerConnection = 'scm:git:ssh://github.com/specmesh/kafka-random-generator.git'
                }

                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                    }
                }

                developers {
                    developer {
                        id = 'C0urante'
                        name = 'Chris Egerton'
                    }
                    developer {
                        name.set("Neil Avery")
                        email.set("8012398+neil-avery@users.noreply.github.com")
                        organization.set("SpecMesh Master Builders")
                        organizationUrl.set("https://www.specmesh.io")
                    }

                }
            }
        }
    }
}

signing {

    println "Calling - Signing: *******"

    setRequired {
        !project.version.toString().endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning")
    }
    if (project.hasProperty("signingKey")) {
        print "SIGNING "
        useInMemoryPgpKeys(project.property("signingKey"), project.property("signingPassword"))
    } else {
        print "NOT SIGNING"
    }

    sign(publishing.publications["mavenJava"])
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '10.3.3'
}
task checkstyleReport(type: Checkstyle) {
    source 'src/main/java'
    classpath = files()
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
javadoc {
    options {
        addBooleanOption('html5', true)
        addStringOption("Xwerror", "-quiet")
        addStringOption('Xdoclint:none', '-quiet')
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
        links 'https://avro.apache.org/docs/1.10.2/api/java/'
    }
}

// See https://github.com/gradle-nexus/publish-plugin
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            if (project.hasProperty("SONA_USERNAME")) {
                username.set(project.property("SONA_USERNAME"))
            }

            if (project.hasProperty("SONA_PASSWORD")) {
                password.set(project.property("SONA_PASSWORD"))
            }
        }
    }
}


